create or replace package chesnokov_se.pkg_code
as
    function ok
        return number;

    function error
        return number;
end;

create or replace package body chesnokov_se.pkg_code as
    function ok
        return number is
    begin
        return 0;
    end;

    function error
        return number is
    begin
        return 200;
    end;
end;


create or replace function chesnokov_se.indent(n number)
return varchar2
as
    v_indent varchar2(4000);
begin
    for i in 1..n loop
        v_indent := v_indent||'     ';
    end loop;
    return v_indent;
end;



create or replace type chesnokov_se.t_arr_doctor as table of chesnokov_se.t_doctor;

create or replace type chesnokov_se.t_arr_hospitals as table of chesnokov_se.t_hospital;

create or replace type chesnokov_se.t_arr_speciality as table of chesnokov_se.t_speciality;

create or replace type chesnokov_se.t_arr_number as table of number;



create or replace function chesnokov_se.repository_doctors(
    out_result out number
)
return clob
as
    v_success boolean;
    v_code number;
    v_clob clob;
begin
    v_clob := chesnokov_se.HTTP_FETCH(
        p_url => 'http://virtserver.swaggerhub.com/AntonovAD/DoctorDB/1.0.0/doctors',
        p_debug => false,
        out_success => v_success,
        out_code => v_code
    );
    out_result := case when v_success
        then chesnokov_se.pkg_code.ok
        else chesnokov_se.pkg_code.error
    end;
    return v_clob;
end;

create or replace function chesnokov_se.repository_hospitals(
    out_result out number
)
return clob
as
    v_success boolean;
    v_code number;
    v_clob clob;
begin
    v_clob := chesnokov_se.HTTP_FETCH(
        p_url => 'http://virtserver.swaggerhub.com/AntonovAD/DoctorDB/1.0.0/hospitals',
        p_debug => false,
        out_success => v_success,
        out_code => v_code
    );
    out_result := case when v_success
        then chesnokov_se.pkg_code.ok
        else chesnokov_se.pkg_code.error
    end;
    return v_clob;
end;

create or replace function chesnokov_se.repository_speciality(
    out_result out number
)
return clob
as
    v_success boolean;
    v_code number;
    v_clob clob;
begin
    v_clob := chesnokov_se.HTTP_FETCH(
        p_url => 'http://virtserver.swaggerhub.com/AntonovAD/DoctorDB/1.0.0/specialties',
        p_debug => false,
        out_success => v_success,
        out_code => v_code
    );
    out_result := case when v_success
        then chesnokov_se.pkg_code.ok
        else chesnokov_se.pkg_code.error
    end;
    return v_clob;
end;


create or replace function chesnokov_se.service_doctors(
    out_result out number,
    out_external_id_specialty out t_arr_number
)
return chesnokov_se.t_arr_doctor
as

    v_result integer;
    v_clob clob;
    v_response chesnokov_se.t_arr_doctor := chesnokov_se.t_arr_doctor();
    v_external_id_specialty chesnokov_se.t_arr_number := chesnokov_se.t_arr_number();
begin

    v_clob := chesnokov_se.repository_doctors(
        out_result => v_result
    );

    select chesnokov_se.t_doctor(
        id_hospital => r.id_hospital,
        id_area => null,
        id_qualification => null,
        doctor_name => r.lname || ' ' || r.fname || ' '|| r.lname,
        salary => null,
        education => null,
        external_id => r.id_doctor,
        source => 1
    )
    bulk collect into v_response
    from json_table(v_clob, '$' columns(
        nested path '$[*]' columns(
            id_doctor number path '$.id_doctor',
            id_hospital number path '$.id_hospital',
            lname varchar2(100) path '$.lname',
            fname varchar2(100) path '$.fname',
            mname varchar2(100) path '$.mname'
    ))) r;
    select b.id_specialty
    bulk collect into v_external_id_specialty
    from json_table(v_clob, '$' columns(
        nested path '$[*]' columns(
            id_specialty number path '$.id_specialty'
    ))) b;
    out_result := v_result;
    out_external_id_specialty := v_external_id_specialty;
    return v_response;
end;

create or replace function chesnokov_se.service_hospitals(
    out_result out number
)
return chesnokov_se.t_arr_hospitals
as

    v_result integer;
    v_clob clob;
    v_response chesnokov_se.t_arr_hospitals := chesnokov_se.t_arr_hospitals();

begin

    v_clob := chesnokov_se.repository_hospitals(
        out_result => v_result
    );

    select chesnokov_se.t_hospital(
        hospital_name  => r.name,
        id_organization => 11,
        id_type => 1,
        availability => 1,
        external_id => r.id_hospital,
        source => 1
    )
    bulk collect into v_response
    from json_table(v_clob, '$' columns(
        nested path '$[*]' columns(
            id_hospital number path '$.id_hospital',
            name varchar2(100) path '$.name'
    ))) r;
    out_result := v_result;
    return v_response;

end;

create or replace function chesnokov_se.service_speciality(
    out_result out number
)
return chesnokov_se.t_arr_speciality
as

    v_result integer;
    v_clob clob;
    v_response chesnokov_se.t_arr_speciality := chesnokov_se.t_arr_speciality();

begin

    v_clob := chesnokov_se.repository_speciality(
        out_result => v_result
    );

    select chesnokov_se.T_SPECIALITY(
        speciality_name  => r.name,
        required_min_age => 0,
        required_max_age => 150,
        external_id => r.external_id,
        source => 1
    )
    bulk collect into v_response
    from json_table(v_clob, '$' columns(
        nested path '$[*]' columns(
            external_id number path '$.id_specialty',
            name varchar2(100) path '$.name'
    ))) r;
    out_result := v_result;
    return v_response;
end;


create or replace procedure chesnokov_se.caching_doctors
as
    v_result integer;
    v_arr_doctor chesnokov_se.t_arr_doctor := chesnokov_se.t_arr_doctor();
    external_id_specialty chesnokov_se.t_arr_number := chesnokov_se.t_arr_number();
begin

     v_arr_doctor := chesnokov_se.service_doctors(
        out_result => v_result,
        out_external_id_specialty => external_id_specialty
    );
    if v_arr_doctor.count>0 then
    for i in v_arr_doctor.first..v_arr_doctor.last
        loop
            declare
                v_item chesnokov_se.t_doctor := v_arr_doctor(i);
                count_doctor number;
                v_id_specialty number;
                v_id_hospital number;
                v_item_number number := external_id_specialty(i);
            begin
                select count(id_doctor)
                into count_doctor
                from chesnokov_se.doctors
                where doctors.external_id =  v_item.external_id and doctors.source = v_item.source;

                select SPECIALTIES.ID_SPECIALTY
                    into v_id_specialty
                    from chesnokov_se.specialties
                    where specialties.EXTERNAL_ID = v_item_number and source_id = 1;

                select id_hospital
                    into v_id_hospital
                    from chesnokov_se.hospitals
                    where hospitals.external_id = v_item.ID_HOSPITAL and source = 1;


                if count_doctor = 0 then
                    insert into chesnokov_se.doctors(id_hospital, id_area, id_qualification, doctor_name, salary, education, delete_dt, external_id, source)
                        values (v_id_hospital, v_item.ID_AREA, v_item.ID_QUALIFICATION, v_item.DOCTOR_NAME, v_item.SALARY, v_item.EDUCATION, v_item.DELETE_DT, v_item.EXTERNAL_ID, v_item.SOURCE);
                    insert into chesnokov_se.DOCTOR_SPECIALTIES(ID_DOCTOR, ID_SPECIALTY)
                        values (v_item.ID_DOCTOR, v_id_specialty);
                    commit;
                end if;
            end;
        end loop;
    end if;
end;

create or replace procedure chesnokov_se.caching_hospitals
as
    v_result integer;
    v_arr_hospital chesnokov_se.t_arr_hospitals := chesnokov_se.t_arr_hospitals();
begin
    v_arr_hospital := chesnokov_se.service_hospitals(
        out_result => v_result
    );
    if v_arr_hospital.count>0 then
    for i in v_arr_hospital.first..v_arr_hospital.last
        loop
            declare
                v_item chesnokov_se.t_hospital := v_arr_hospital(i);
                count_hospital number;
            begin
                select count(id_hospital)
                into count_hospital
                from chesnokov_se.hospitals
                where hospitals.external_id =  v_item.external_id and hospitals.source = v_item.source;

                if count_hospital = 0 then
                    insert into chesnokov_se.hospitals(hospital_name, id_organization, id_type, delete_dt, availability, external_id, source)
                    values (v_item.HOSPITAL_NAME, v_item.ID_ORGANIZATION, v_item.ID_TYPE, v_item.DELETE_DT, v_item.AVAILABILITY, v_item.EXTERNAL_ID, v_item.SOURCE);
                    commit;
                end if;
            end;
        end loop;
    end if;
end;

create or replace procedure chesnokov_se.caching_speciality
as
    v_result integer;
    v_arr_speciality chesnokov_se.t_arr_speciality := chesnokov_se.t_arr_speciality();
begin
    v_arr_speciality := chesnokov_se.service_speciality(
        out_result => v_result
    );
    if v_arr_speciality.count>0 then
    for i in v_arr_speciality.first..v_arr_speciality.last
        loop
            declare
                v_item chesnokov_se.T_SPECIALITY := v_arr_speciality(i);
                count_speciality number;
            begin
                select count(ID_SPECIALTY)
                into count_speciality
                from chesnokov_se.SPECIALTIES
                where SPECIALTIES.external_id =  v_item.external_id and SPECIALTIES.SOURCE_ID = v_item.source;

                if count_speciality = 0 then
                    insert into chesnokov_se.SPECIALTIES(SPECIALITY_NAME, REQUIRED_MIN_AGE, REQUIRED_MAX_AGE, DELETE_DT, EXTERNAL_ID, SOURCE_ID)
                    values (v_item.SPECIALITY_NAME, v_item.REQUIRED_MIN_AGE, v_item.REQUIRED_MAX_AGE, v_item.DELETE_DT, v_item.EXTERNAL_ID, v_item.SOURCE);
                    commit;
                end if;
            end;
        end loop;
    end if;
end;




create or replace procedure chesnokov_se.caching
as
begin
    chesnokov_se.caching_speciality();
    chesnokov_se.caching_hospitals();
    chesnokov_se.caching_doctors();
end;

begin
    sys.dbms_scheduler.create_job(
        job_name        => 'chesnokov_se.caching_doctors',
        start_date      => to_timestamp_tz('2021/12/01 14:00:00.000000 +07:00','yyyy/mm/dd hh24:mi:ss.ff tzh:tzm'),
        repeat_interval => 'FREQ=HOURLY;INTERVAL=1;',
        end_date        => null,
        job_class       => 'DEFAULT_JOB_CLASS',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'begin chesnokov_se.caching_doctors_action; end;',
        comments        => 'Тестовая задача'
    );
end;


select * from user_scheduler_jobs;

begin
    sys.dbms_scheduler.enable(
        name      => 'chesnokov_se.caching_hospital'
    );
end;
/

begin
    sys.dbms_scheduler.disable(
        name      => 'chesnokov_se.caching_hospital'
    );
end;

begin
    sys.dbms_scheduler.drop_job(
        job_name      => 'chesnokov_se.caching_hospital'
    );
end;
declare

